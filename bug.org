* Java Debugger

*** compile the java agent

/home/jruby/tools/jdk1.8.0_131/bin/javac -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger.java

*** start the java agent

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger

*** start the debugee 

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=y foo

#+BEGIN_SRC emacs-lisp :tangle yes
    (require 'ht)
    (require 's)

    (defvar javadebug-mode-map
      (let ((map (make-sparse-keymap)))
        (define-key map "\C-j" 'sendDebuggerCommand)
        map))

    (defvar proxyProcess nil "the JAVA proxy program which connects to the program to be debugged")

    (defconst orgTableSeperator     "----"                                                                 "string to seperate table title from contents")
    (defconst localTableTitle         "|Local|Value|\n"                                                  "title tor local variables table")
    (defconst argumentsTableTitle "|Argumentsl|Value|\n"                                           "title for method arguments table")
    (defconst threadTableTitle       "|ID|Name|State|Frames|Breakpoint|Suspended|\n"    "title for thread table")

    (define-derived-mode javadebug-mode
      org-mode "JavaDebug"
      "Major mode java debugger.")

  (defun startProc (px src mn)
      (interactive "Dproxy directory: \nDsource root:: \nMmain class ")
      (cd (file-name-as-directory px))
      (setq proxyProcess (start-process 
                          "jdbProxy" 
                          (current-buffer)
                          "/home/jruby/tools/jdk1.8.0_131/bin/java" 
                          "-cp" 
                          "/home/jruby/tmp/jdb/:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" 
                          "debugger"))
      (goto-char (point-max))
      (set-marker (process-mark proxyProcess) (point))
      (delete-other-windows)
      (javadebug-mode)
      (setq sourceWindow (split-window-below))
      (setq expected
            (list
             (list "vmstart" "connected to java program" (list (concat "prepare " mn) "run"))
             (list "classloaded" "main class loaded" (list (concat "break " mn " main") "continue"))))
      (setq stateStack (list "start" "basic"))
      (setq jdbuggerString "")
      (set-process-filter proxyProcess 'javadebug-insertion-filter)
      (writeStringToBuffer proxyProcess (concat "** Starting debugger session " (current-time-string) "\n"))
      (sendDebuggerCommand "attach localhost 8000"))

  (defun sendDebuggerCommand (command)
    (interactive "Mdebugger command: ")
    (if (and (s-present? command) (string-match-p "[a-zA-Z]" command))
        (let ((com (concat  command "\n")))
          (writeStringToBuffer proxyProcess (concat "*** " com))
          (process-send-string proxyProcess com))))

  (defun writeStringToBuffer (proc string)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (process-mark proc))
          (insert string)
          (set-marker (process-mark proc) (point))))))

  (defun writeOrgTableToBuffer (proc title strings)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (process-mark proc))
          (insert title)
          (insert orgTableSeperator)
          (dolist (s strings)
            (insert (concat "\n" s)))
          (beginning-of-line)
          (org-ctrl-c-ctrl-c)
          (end-of-line)
          (insert "\n")
          (set-marker (process-mark proc) (point))))))

  (defun javadebug-insertion-filter (proc string)
  (message "insertion filter %s" string)
    (writeStringToBuffer proc string)
    (setq jdbuggerString (concat jdbuggerString string))
    (if (and (s-present? jdbuggerString) (string-match-p "[a-zA-Z]" jdbuggerString))
        (let ((commands (s-lines jdbuggerString)))
          (if (string-match-p "\n[ \t]*$" string)
              (setq jdbuggerString "")
            (setq jdbuggerString (nth (1- (length commands)) commands))
            (setq commands (butlast commands)))
          (dolist (in commands)
            (if (and (s-present? in) (string-match-p "[a-zA-Z]" in))
                (jdbAction proc (split-string in ",")))))
      (setq jdbuggerString "")))

  (defun jdbAction (proc in)
      (let ((state (car stateStack))
             (act   (car in))
             (args  (cdr in)))
        (cond ((string= act "error")
               (writeStringToBuffer proc (concat "*** Error "  (car args) "\n")))
              ((string= state "basic")
               (basicState proc act args))
              ((string= state "start")
               (startState proc act args)))))

  (defun basicState (proc act args)
    (let ((retstring ()))
      (cond ((string= act "breakpoint")
             (writeStringToBuffer
              proc
              (concat
               "breakpoint in thread "
               (threadID (breakpointThread args))
               " at "              
               (locationFile (breakpointLocation args))
               ":"
               (locationLineNumber (breakpointLocation args))
               "\n"))
             (setSourceFileWindow
              proc
              (locationFile (breakpointLocation args))
              (locationLineNumber (breakpointLocation args))))
            ((string= act "step"))
            ((string= act "local")
             (while args
               (setq retstring (cons (concat " | " (nameValuePairName args) " | "  (nameValuePairValue args) " \ ") retstring))
               (setq args (skipNameValuePair args)))
             (writeOrgTableToBuffer proc localTableTitle retstring))
            ((string= act "argument")
             (while args
               (setq retstring (cons (concat " | " (nameValuePairName args) " | "  (nameValuePairValue args) " \ ") retstring))
               (setq args (skipNameValuePair args)))
             (writeOrgTableToBuffer proc argumentsTableTitle retstring))
            ((string= act "thread")
             (while args
               (setq retstring (cons (concat "| " (threadID args) " | " (threadName args) " | " (threadState args) " | " (threadFrames args) " | " (threadBreakpoint args) " | " (threadSuspended args) " | ") retstring))
               (setq args (skipThread args)))
             (writeOrgTableToBuffer proc threadTableTitle retstring)))))

  (defun threadID (args) (nth 1 args))
  (defun threadName (args) (nth 2 args))
  (defun threadState (args) (nth 3 args))
  (defun threadFrames (args) (nth 4 args))
  (defun threadBreakpoint (args) (nth 5 args))
  (defun threadSuspended (args) (nth 6 args))

  (defun skipThread (args) (nthcdr 7 args))
  (defun threadDescriptor (args)
   (if (string= "thread" (car args))
       (-slice args 0 7)
     ()))

  (defun breakpointThread (args) (-slice args 0 7))
  (defun breakpointLocation (args) (-slice args  7 12))

  (defun locationFile (args) (nth 1 args))
  (defun locationLineNumber (args) (nth 2 args))
  (defun locationMethod (args) (nth 3 args))

  (defun nameValuePairName (args) (nth 0 args))
  (defun nameValuePairValue (args) (nth 1 args))
  (defun skipNameValuePair   (args) (nthcdr 2 args))

  (defun startState (proc act args)
    (let ((ps (car expected)))
    (message "startState %s" (car ps))
      (if (string= act (car ps))
          (let ((ms (nth 1 ps))
                (cm (nth 2 ps)))
            (setq expected (cdr expected))
            (if (null expected)
                (pop stateStack))
            (writeStringToBuffer proc (concat ms "\n"))
            (dolist (c cm)
              (sendDebuggerCommand c))))))

  (defun setSourceFileWindow (proc file line)
    (let ((bug (find-file-noselect file)))
      (when (and bug (buffer-live-p (process-buffer proc)))
        (with-current-buffer bug
          (goto-char (point-min))
          (forward-line (1- (string-to-number line))))
        (with-current-buffer (process-buffer proc)
          (goto-char (point-max)))
        (if (= (length (window-list)) 1)
            (split-window))
        (winForOtherBuffer bug (process-buffer proc))
        (let ((procWin (winForOtherBuffer (process-buffer proc) bug)))
          (if procWin
              (select-window procWin))))))

  (defun winForOtherBuffer (buffer notbuffer)
    (let ((win (get-buffer-window buffer)))
      (when (not win)
        (let  ((wl (window-list)))
            (while (and wl (eq notbuffer (window-buffer (car wl))))
              (setq wl (cdr wl)))
            (setq win (if wl (car wl) (car (window-list))))
          (set-window-buffer win buffer)))
        win))

#+END_SRC

#+RESULTS:
: winForOtherBuffer
** Starting debugger session Wed Nov  1 19:39:49 2017
*** attach localhost 8000
Debugger started
attached,created virtual machine
vmstart
connected to java program
*** prepare foo
*** run
classloaded,foo
main class loaded
*** break foo main
*** continue
breakpoint,thread,1,main,running,1,true,true,location,foo.java,5,main
breakpoint in thread 1 at foo.java:5
locations object reference: class foo (loaded by instance of sun.misc.Launcher$AppClassLoader(id=66)) instance of java.lang.Class(reflected class=foo, id=63) foo.java foo false false true true false true
Method: <init> void
Method: main void
Method: sum int
Field: a int
Field: b int
*** thread all
thread,thread,69,Signal Dispatcher,running,0,false,true,thread,70,Finalizer,waiting,4,false,true,thread,71,Reference Handler,waiting,4,false,true,thread,1,main,running,1,true,true
| ID | Name              | State   | Frames | Breakpoint | Suspended |
|  1 | main              | running |      1 | true       | true      |
| 71 | Reference Handler | waiting |      4 | false      | true      |
| 70 | Finalizer         | waiting |      4 | false      | true      |
| 69 | Signal Dispatcher | running |      0 | false      | true      |
*** frame 1 0
argument,args,instance of java.lang.String[0] (id=72)
local

|Argumentsl|Value|
----
 | args | instance of java.lang.String[0] (id=72) 
*** quit
VMDisconnectEvent
Exception,com.sun.jdi.VMDisconnectedException

Process jdbProxy<2> finished
|Local|Value|
----
