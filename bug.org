* Java Debugger

*** compile the java agent

/home/jruby/tools/jdk1.8.0_131/bin/javac -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger.java

*** start the java agent

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger

*** start the debuggee

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=y foo


#+BEGIN_SRC emacs-lisp :tangle yes
         (require 'ht)

         (defun sendDebuggerCommand ()
           (interactive)
           (beginning-of-line)
           (let ((p (point))
                 (b))
             (end-of-line)
             (process-send-string
              proc
              (concat  (setq b (buffer-substring-no-properties p (point))) "\n"))) ;
           (insert "\n"))

         (defvar javadebug-mode-map
           (let ((map (make-sparse-keymap)))
             (define-key map "\C-j" 'sendDebuggerCommand)
             map))

         (define-derived-mode javadebug-mode
           org-mode "JavaDebug"
           "Major mode java debugger.")

         (javadebug-mode)

    (defun startProc (px src mn)
      (interactive "Dproxy directory: \nDsource root:: \nMmain class ")
      (kill-buffer "*jdbugger*")
      (let ((default-directory px))
        (setq 
         proc 
         (start-process 
          "my-process" 
          "*jdbugger*"
          "/home/jruby/tools/jdk1.8.0_131/bin/java" 
          "-cp" 
          "/home/jruby/tmp/jdb/:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" 
          "debugger")))
      (let ((default-directory src))
        (setq expected
              (list
               (list "vmstart" "connected to java program" (list "prepare foo" "run"))
               (list "classloaded" "main class loaded" (list "break foo main" "continue"))))
        (setq stateStack (list "start" "basic"))
        (setq jdbuggerBuffer (current-buffer))
        (setq jdbuggerString "")
        (set-process-filter proc 'javadebug-insertion-filter)
        (goto-char (point-max))
        (insert "** Starting debugger session\n")
        (sendDebuggerCommand "attach localhost 8000\n")
        (delete-other-windows)
        (setq sourceWindow (split-window-below))
        (set-window-buffer sourceWindow (process-buffer proc))))

    (defun sendDebuggerCommand (command)
      (interactive "Mdebugger command: ")
      (process-send-string
       proc
       (concat  command "\n"));
      (goto-char (point-max))
      (insert (concat "*** " command "\n")))

    (defun javadebug-insertion-filter (proc string)
      (when (buffer-live-p (process-buffer proc))
        (with-current-buffer (process-buffer proc)
          (save-excursion
            ;; Insert the text, advancing the process marker.
            (goto-char (process-mark proc))
            (insert string)
            (set-marker (process-mark proc) (point)))))
      (setq jdbuggerString (concat jdbuggerString string))
      (let ((commands (split-string jdbuggerString "\n" t)))
        (if (string-match-p "\n[ \t]*$" string)
            (setq jdbuggerString "")
          (setq jdbuggerString (nth (1- (length commands)) commands))
          (setq commands (butlast commands)))
        (dolist (in commands)
          (jdbAction in))))

  (defun basicState (act args)
    (let ((retstring ())
      (cond ((string= act "breakpoint")
             (push "breakpoint" stateStack)
            (setq retstring (cons "breakpoint" retstring)))
            ((string= act "step"))
            ((string= act "local")
             (setq retstring (cons "|Local|Value|" retstring))
             (setq retstring (cons "----" retstring))
             (while args
               (setq retstring (cons (concat (nth 0 args) " | "  (nth 1 args)) retstring))
               (setq args (cdr (cdr args))))
             (setq retstring (cons "orgctrlcctrlc" retstring)))
            ((string= act "argument")
             (with-current-buffer jdbuggerBuffer
               (insert "|Argumentsl|Value|\n|----")
               (while args
                 (insert (concat "|\n| " (nth 0 args) " | "  (nth 1 args)))
                   (setq args (cdr (cdr args))))
               (beginning-of-line)
               (org-ctrl-c-ctrl-c)
               (end-of-line)
               (insert "\n")))
            ((string= act "location")
             (location args))
            ((string= act "thread")
             (with-current-buffer jdbuggerBuffer
               (insert "|ID|Name|State|Frames|Breakpoint|Suspended|\n")
                 (insert "|----|\n")
             (while args
               (insert (concat "| " (threadID args) " | " (threadName args) " | " (threadState args) " | " (threadFrames args) " | " (threadBreakpoint args) " | " (threadSuspended args) " |\n"))
               (setq args (afterThread args)))))))))

  (defun threadID (args) (nth 0 args))
  (defun threadName (args) (nth 1 args))
  (defun threadState (args) (nth 2 args))
  (defun threadFrames (args) (nth 3 args))
  (defun threadBreakpoint (args) (nth 4 args))
  (defun threadSuspended (args) (nth 5 args))
  (defun afterThread (args) (nthcdr 6 args))

  (defun breakpointState (act args)
    (cond ((string= act "thread")
           (with-current-buffer jdbuggerBuffer
             (insert (concat "in thread " (threadID args) " "))))
          ((string= act "location")
           (location args))
            (t
             (with-current-buffer jdbuggerBuffer
               (insert "\n"))
             (pop stateStack))))

  (defun startState (act args)
    (let ((ps (car expected)))
      (if (string= act (car ps))
          (let ((ms (nth 1 ps))
                (cm (nth 2 ps)))
              (setq expected (cdr expected))
              (if (null expected)
                  (pop stateStack))
              (with-current-buffer jdbuggerBuffer
                (insert (concat ms "\n"))
                (dolist (c cm)
                  (sendDebuggerCommand c)))))))

  (defun jdbAction (in)
    (let* ((com   (split-string in "," t))
           (state (car stateStack))
           (act   (car com))
           (args  (cdr com)))
      (cond ((string= act "error")
             (with-current-buffer jdbuggerBuffer
               (insert (concat "*** Error " (car args) "\n"))))
            ((string= state "basic")
             (basicState act args))
            ((string= state "breakpoint")
             (breakpointState act args))
            ((string= state "start")
             (startState act args))
            ((string= state "thread")
             (threadState act args)))))

    (defun location (args)
      (let* ((file (nth 0 args))
             (line (nth 1 args))
             (bug (find-file-noselect file))
             (same nil)
             (dif nil))
        (with-current-buffer jdbuggerBuffer
          (insert (concat file ":" line "\n"))
          (dolist (win (window-list))
            (if (eq (window-buffer win) bug)
                (setq same win))
            (if (not (eq (window-buffer win) jdbuggerBuffer))
                (setq dif win))
            (if same
                (select-window same)
              (if dif
                  (progn
                    (set-window-buffer dif bug)
                    (select-window dif))))
            (if (eq (window-buffer (selected-window)) bug)
                (progn
                  (goto-char (point-min))
                  (forward-line (1- (string-to-number line)))))
            (if (get-buffer-window jdbuggerBuffer)
                (select-window (get-buffer-window jdbuggerBuffer)))))))
#+END_SRC

#+RESULTS:
: location

** Starting debugger session
*** attach localhost 8000

*** prepare foo
*** run
*** break foo main
*** continue
*** continue
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
*** prepare foo
*** run
*** break foo main
*** continue
*** quit
** Starting debugger session
*** attach localhost 8000

*** quit
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
*** quit
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
connected to java program/n
*** prepare foo
*** run
main class loaded/n
*** break foo main
*** continue
breakpoint in thread 1 foo.java:5

*** quit
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
connected to java program
*** prepare foo
*** run
main class loaded
*** break foo main
*** continue
breakpoint in thread 1 foo.java:5

** Starting debugger session
*** attach localhost 8000

*** Error unknown command
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
connected to java program
*** prepare foo
*** run
main class loaded
*** break foo main
*** continue
breakpoint in thread 1 foo.java:5

*** quit
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
connected to java program
*** prepare foo
*** run
main class loaded
*** break foo main
*** continue
breakpoint in thread 1 foo.java:5

*** break foo 23
*** continue
*** thread all
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
** Starting debugger session
*** attach localhost 8000

*** Error unknown command
connected to java program
*** prepare foo
*** run
main class loaded
*** break foo main
*** continue
breakpoint in thread 1 foo.java:5

*** break foo 23
*** continue
*** break foo 23
*** continue
*** thread all
*** frame 1 1
*** thread all
*** thread all
*** quit
