* Java Debugger

*** compile the java agent

/home/jruby/tools/jdk1.8.0_131/bin/javac -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger.java

*** start the java agent

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger

*** COMMENT start the debugee 

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=y test.foo 3 4

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ht)
  (require 's)
  (require 'bm)

  (defvar javadebug-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "RET") 'javadebug-newline)
      (define-key map (kbd "M-p") 'javadebug-commandring)
      map))

  (defvar proxyProcess () "the JAVA proxy program which connects to the program to be debugged")
  (defvar defaultThread "" "the last thread in which we had a breakpoint. use this thread if no thread number is specified in a command")

  (defvar commandsToRun  () "list of commands to send to proxy")

  (defconst orgTableSeperator       "|----|\n"                                                                                          "string to seperate table title from contents")
  (defconst localTableTitle               "|Locals|\n"                                                                                     "title for local variables table")
  (defconst argumentsTableTitle  "|Arguments|\n"                                                                           "title for method arguments table")
  (defconst threadTableTitle           "|ID|Name|State|Frames|Breakpoint|Suspended|\n"     "title for thread table")

  (defconst sessionHeadline     "* "     "start of debugging session")
  (defconst breakpointHeadline "** "    "reports a breakpoint")
  (defconst commandHeadline  "*** "   "enter a command")

(defcustom javadebug-mode-functions 'javadebug-proxy-string-received
  "Abnormal hook run on reception of a string from the proxy."
  :type 'hook
  :options '(javadebug-proxy-string-received)
  :group 'javadebug)

  (defconst commandList
    (list
     (list "arguments"
           (lambda (c) (not (or (= (length c) 1)
                                 (and (= (length c) 2) (string-match "[0-9]+" (nth 1 c)))
                                 (and (= (length c) 3)  (string-match "[0-9]+" (nth 1 c))  (string-match "[0-9]+" (nth 2 c))))))
           "arguments [thread-id] [frame number]"
           (lambda (c)
             (format
              "frame %s %s"
              (if (= (length c) 1) defaultThread (nth 1 c))
              (if (or (= (length c) 1)  (= (length c) 2)) "0" (nth 2 c))))
           (lambda (r) (string= (car r) "arguments")))
     (list "attach"
           (lambda (c) (or (/= (length c) 3)  (not (string-match "[0-9]+" (nth 2 c)))))
           "attach host  [port number]"
           (lambda (c) (format "attach %s %s" (nth 1 c) (nth 2 c)))
           (lambda (r) (and (string= (car r) "vm")) (string= (nth 1 r) "started")))
     (list "back"
           (lambda (c) (or (> (length c) 2)  (and (= (length c) 2) (not (string-match "[0-9]+" (nth 1 c))))))
           "back [thread-id]"
           (lambda (c)
             (format
              "back %s"
              (if (= (length c) 1) defaultThread (nth 1 c))))
           (lambda (r) (string= (car r) "step")))
     (list "break"
           (lambda (c) (/= (length c) 3))
           "break class-name <line-number|method name>"
           (lambda (c) (format "break %s %s" (nth 1 c) (nth 2 c)))
           (lambda (r) (and (string= (car r) "break")) (string= (nth 2 r) "created")))
     (list "breaks"
           (lambda (c) (/= (length c) 1))
           "breaks"
           (lambda (c) "breaks")
           (lambda (r) (string= (car r) "breakpoints")))
     (list "continue"
           (lambda (c) (/= (length c) 1))
           "continue"
           (lambda (c) (format "continue"))
           (lambda (r) (string= (car r) "resuming")))
     (list "frame"
           (lambda (c) (not (or (= (length c) 1)
                                 (and (= (length c) 2) (string-match "[0-9]+" (nth 1 c)))
                                 (and (= (length c) 3)  (string-match "[0-9]+" (nth 1 c))  (string-match "[0-9]+" (nth 2 c))))))
           "frame [thread-id] [frame number]"
           (lambda (c)
             (format
              "frame %s %s"
              (if (= (length c) 1) defaultThread (nth 1 c))
              (if (or (= (length c) 1)  (= (length c) 2)) "0" (nth 2 c))))
           (lambda (r) (string= (car r) "frame")))
     (list "into"
           (lambda (c) (or (> (length c) 2)  (and (= (length c) 2) (not (string-match "[0-9]+" (nth 1 c))))))
           "into [thread-id]"
           (lambda (c)
             (format
              "into %s"
              (if (= (length c) 1) defaultThread (nth 1 c))))
           (lambda (r) (string= (car r) "step")))
     (list "load"
           (lambda (c) (/= (length c) 1))
           "run"
           (lambda (c) (format "run"))
           (lambda (r) (string= (car r) "classloaded")))
     (list "locals"
           (lambda (c) (not (or (= (length c) 1)
                                 (and (= (length c) 2) (string-match "[0-9]+" (nth 1 c)))
                                 (and (= (length c) 3)  (string-match "[0-9]+" (nth 1 c))  (string-match "[0-9]+" (nth 2 c))))))
           "locals [thread-id] [frame-number]"
           (lambda (c)
             (format
              "frame %s %s"
              (if (= (length c) 1) defaultThread (nth 1 c))
              (if (or (= (length c) 1)  (= (length c) 2)) "0" (nth 2 c))))
           (lambda (r) (string= (car r) "locals")))
     (list "next"
           (lambda (c) (or (> (length c) 2)  (and (= (length c) 2) (not (string-match "[0-9]+" (nth 1 c))))))
           "next [thread-id]"
           (lambda (c)
             (format
              "next %s"
              (if (= (length c) 1) defaultThread (nth 1 c))))
           (lambda (r) (string= (car r) "step")))
     (list "prepare"
           (lambda (c) (/= (length c) 2))
           "prepare [class name]"
           (lambda (c) (format "prepare %s" (nth 1 c)))
           (lambda (r) (string= (car r) "prepared")))
     (list "quit"
           (lambda (c) (/= (length c) 1))
           "quit"
           (lambda (c) "quit")
           (lambda (r) (string= (car r) "proxy"))) 
     (list "run"
           (lambda (c) (/= (length c) 1))
           "run"
           (lambda (c) (format "run"))
           (lambda (r) (string= (car r) "resuming")))
     (list "stack"
           (lambda (c) (or (> (length c) 2)  (not (string-match "[0-9]+" (nth 1 c)))))
           "stack [thread-id]"
           (lambda (c)
             (format
              "stack %s"
              (if (= (length c) 1) defaultThread (nth 1 c))))
           (lambda (r) (string= (car r) "stack")))
     (list "this"
           (lambda (c) (not (or (= (length c) 1)
                                (and (= (length c) 2)  (string-match "[0-9]+" (nth 1 c)))
                                (and (= (length c) 3)   (string-match "[0-9]+" (nth 1 c)) (string-match "[0-9]+" (nth 2 c))))))
           "this [thread-id] [frame number]"
           (lambda (c)
             (format
              "this %s %s"
              (if (= (length c) 1) defaultThread (nth 1 c))
              (if (or (= (length c) 1)  (= (length c) 2) "0" (nth 2 c)))))
           (lambda (r) (string= (car r) "this)")))
     (list "threads"
           (lambda (c) (/= (length c) 1))
           "threads"
           (lambda (c) "threads")
           (lambda (r) (string= (car r) "threads"))))
    "all the commands we can send to the proxy")

  (defun commandName (e) (nth 0 e))
  (defun commandIsBadP (e f)  (funcall (nth 1 e) f))
  (defun commandTemplate (e) (nth 2 e))
  (defun commandFinalForm (e f)  (funcall (nth 3 e) f))
  (defun commandFinished (e f) (funcall (nth 4 e) f))

  (defvar commandHashMap () "hash map containing the contents of the commandList")
  (defvar runningCommand   () "the command which is active in the proxy")

  (define-derived-mode javadebug-mode
    org-mode "JavaDebug"
    "Major mode java debugger.")

  (defun startProc (px src mn)
    (interactive "Dproxy directory: \nDsource root:: \nMmain class ")
    (message "startProc")
    (find-file (concat mn (format-time-string ".%Y,%m.%d.%H.%M.%S") ".org"))
    (insert "#+STARTUP: showeverything\n")
    (goto-char (point-max))
    (insert (concat "\n\n" sessionHeadline "Starting debugger session " (current-time-string) ".\n\tProxy directory: " px ".\n\tSource root: " src ".\n\tMain class: " mn ".\n\n"));
    (cd (file-name-as-directory px))
    (delete-other-windows)
    (javadebug-mode)
    (add-hook 'javadebug-mode-functions 'javadebug-proxy-string-received)
    (setq sourceWindow (split-window-below))
    (setq jdbuggerString "")
    (setq javadebug-ring (make-ring 8))
    (setq javadebug-ring-index 0)
    (setq commandsToRun ())
    (setq commandHashMap (ht-create))

    (dolist (v commandList)
      (ht-set commandHashMap (commandName v) v))

    ;; wait until the proxy starts up

    (setq runningCommand
          (list
           ()
           (list "proxy"
                 (lambda (c) ())
                 ""
                 (lambda (c) "")
                 (lambda (r) (and (string= (car r) "proxy") (string= (nth 1 r) "started"))))
           ()))

    (setq proxyProcess
          (start-process 
           "jdbProxy" 
           (current-buffer)
           "/home/jruby/tools/jdk1.8.0_131/bin/java" 
           "-cp" 
           "/home/jruby/tmp/jdb/:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" 
           "debugger"))
    (set-process-filter proxyProcess 'javadebug-insertion-filter)
    (goto-char (point-max))
    (set-marker (process-mark proxyProcess) (point))
    (insert (format "attach localhost 8000;prepare %s;load;break %s main;continue" mn mn))
    (javadebug-newline))

  (defun javadebug-newline ()
    (interactive)
    (let ((com (buffer-substring-no-properties
                (line-beginning-position)
                (line-end-position))))
      (if (or 
           (/=  (line-end-position) (point-max))
           (not (string-match-p "[a-zA-Z0-9 ]+" com)))
          (org-return)
        (beginning-of-line)
        (ignore-errors (kill-line))  ;; kill-line signals an error at the end of buffer
        (javadebug-add-commands (split-string com ";" 't)))))

  (defun javadebug-add-commands (com)
    (let ((r (javadebug-check-commands com)))
      (if (javadebug-check-errors r)
          (dolist (v (javadebug-check-errors r))
            (writeStringToBuffer proxyProcess (concat v "\n")))
        (setq commandsToRun (append commandsToRun (javadebug-check-good-commands r)))
        (message "javadebug-add-commands commandsToRun %s runningCommand %s" commandsToRun runningCommand)
        (javadebug-execute-command))))

  (defun javadebug-check-commands (cm)
    (let ((checkErrors ())
          (goodCommands ()))
      (dolist (v cm)
        (let* ((c (split-string v " "  't))
               (commandEntry (ht-get commandHashMap (car c))))
          (if (null commandEntry)
              (setq checkErrors (append checkErrors (list (concat "error - no such command: " v))))
            (if (commandIsBadP commandEntry c)
                (setq checkErrors (append checkErrors (list (concat "error - bad command format " v ". Try "  (commandTemplate commandEntry)))))
              (setq goodCommands (append goodCommands (list (list c commandEntry))))
              (message "javadebug-check-commands c %s commandEntry %s goodCommands %s commandsToRun %s" c commandEntry goodCommands commandsToRun)))))
      (list goodCommands checkErrors)))

  (defun javadebug-check-good-commands (l) (nth 0 l))
  (defun javadebug-check-errors (l) (nth 1 l))

  (defun javadebug-command-split (l) (nth 0 l))
  (defun javadebug-command-entry (l) (nth 1 l))
  (defun javadebug-command-finished (l) (nth 2 l))

  (defun javadebug-execute-command ()
    (if (and commandsToRun (null runningCommand))
        (let* ((c (car commandsToRun))
               (finished ""))
          (setq commandsToRun (cdr commandsToRun))
          (setq finished (commandFinalForm (javadebug-command-entry c) (javadebug-command-split c)))
          (message "javadebug-execute-command c %s commandsToRun %s finished %s " c commandsToRun finished)
          (ring-insert javadebug-ring finished)
          (writeStringToBuffer proxyProcess (concat "\n" commandHeadline finished "\n"))
          (setq runningCommand (list  (javadebug-command-split c) (javadebug-command-entry c) finished))
          (process-send-string proxyProcess (concat  finished "\n")))))

  (defun javadebug-commandring ()
    (interactive)
    (if (/=  (line-end-position) (point-max))
        (progn
          (goto-char (point-max))
          (insert "\n")
          (setq javadebug-ring-index 0))
      (beginning-of-line)
      (ignore-errors (kill-line))  ;; kill-line signals an error at the end of buffer
      (if (not (ring-empty-p javadebug-ring))
          (progn
            (if (>= javadebug-ring-index (ring-length javadebug-ring))
                (setq javadebug-ring-index 0))
            (insert (ring-ref javadebug-ring javadebug-ring-index))
            (setq javadebug-ring-index (1+ javadebug-ring-index))))))
e
  (defun writeStringToBuffer (proc string)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (point-max))
          (insert string)))))

  (defun writeOrgTableToBuffer (proc title sep rows)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (point-max))
          (insert (concat "\n\n" title))
          (let ((tableStart (point)))
            (insert sep)
            (insert (dataLayout rows))
            (goto-char tableStart)
            (ignore-errors (org-ctrl-c-ctrl-c)))))))

  (defun dataLayout (args)
    (if args
        (let ((s "| ")
              (stack ())
              (rc 0)
              (ac 0))
          (push (list rc args) stack)
          (while stack
            (cond
             ((not args)
              (let ((a (pop stack)))
                (setq args (nth 1 a))
                (setq rc     (nth 0 a))))
             ((listp (car args))
              (push (list rc (cdr args)) stack)
              (setq args (car args)))
             ((not (listp (car args)))
              (let ((v (car args)))
                (setq args (cdr args))
                (while (/= rc ac)
                  (cond
                   ((< ac rc)
                    (setq s (concat s " | "))
                    (setq ac (1+ ac)))
                   ((> ac rc)
                    (setq s (concat s "\n| "))
                    (setq ac 0))))
                (setq s (concat s v))
                (setq rc (1+ rc))))))
          s)
      ""))

  (defun javadebug-insertion-filter (proc string)
    (message "Received: %s :EndReceived %s" string commandsToRun)
    (setq jdbuggerString (concat jdbuggerString string))
    (if (s-ends-with? "\n" jdbuggerString)
        (let ((com (split-string jdbuggerString "\n" 't)))
          (message "javadebug-insertion-filter jdbuggerString: %s com %s" jdbuggerString com)
          (setq jdbuggerString ())
          (dolist (c com)
            (message "javadebug-insertion-filter c: %s com %s" c com)
            (if (not (s-blank? c)) (jdbAction proc c)))
          (when (and (buffer-live-p (process-buffer proc))
                     (get-buffer-window (process-buffer proc)))
            (select-window (get-buffer-window (process-buffer proc)))
            (goto-char (point-max))
            (insert "\n")))))

  (defun jdbAction (proc in)
    (message "jdbAction Processing: %s :EndProcessing\nrunningCommand %s commandsToRun %s" in runningCommand commandsToRun)
    (let ((args (split-string in ",")))
      (if (string= (car args) "error")
           (writeStringToBuffer proc (concat " "  in "\n"))
      (run-hook-with-args 'javadebug-mode-functions proc (car args) (cdr args)))
      (if (and runningCommand
               (or (string= (car args) "error")
                   (commandFinished (javadebug-command-entry runningCommand) args)))
          (progn
            (setq runningCommand ())
            (javadebug-execute-command)))))

  (defun javadebug-proxy-string-received (proc act args)
    (message "javadebug-proxy-string-received act %s args %s" act args)
    (cond 
     ((string= act "break")
      (if (string= (car args)  "created") 
          (writeStringToBuffer proc (concat "Breakpoint created at " (nth 1 args) "\n"))))
     ((string= act "breakpoint")
      (reportBreak (concat "breakpoint " (-first-item args))  (cdr (member "thread" args)) (cdr (member "location" args))))
     ((string= act "classloaded")
      (writeStringToBuffer proc (concat "Class " (car args) " loaded.\n")))
     ((string= act "step")
      (reportBreak "step"   (cdr (member "thread" args)) (cdr (member "location" args))))
     ((string= act "proxy")
      (if (string= "exit" (car args))
          (progn
            (delete-process proc)
            (writeStringToBuffer proc "Debugger proxy exited\n")))
      (if (string= "started" (car args))
          (writeStringToBuffer proc "Debugger proxy started\n")))
     ((string= act "vm")
      (if (string= "started" (car args))
          (writeStringToBuffer proc "virtual machine started\n")
        (if (string= "created" (car args))
            (writeStringToBuffer proc "virtual machine created\n"))))
     ((string= act "frame") )
     ((string= act "arguments")
      (if
          (or
           (string= (car (javadebug-command-entry runningCommand)) "arguments")
           (string= (car (javadebug-command-entry runningCommand)) "frame"))
          (writeOrgTableToBuffer
           proc
           argumentsTableTitle
           orgTableSeperator
           (if (and args (car args)) (nth 0 (read-from-string (car args))) ()))))
     ((string= act "locals")
      (if
          (or
           (string= (car (javadebug-command-entry runningCommand)) "locals")
           (string= (car (javadebug-command-entry runningCommand)) "frame"))
          (writeOrgTableToBuffer
           proc
           localTableTitle
           orgTableSeperator
           (if (and args (car args)) (nth 0 (read-from-string (car args))) ()))))
     ((string= act "resuming") 
      (writeStringToBuffer proc "virtual machine resuming operation.\n"))
     ((string= act "prepared") 
      (writeStringToBuffer proc (concat "class prepare request for" (nth 1 args) "\n")))
     ((string= act "threads")
        (writeOrgTableToBuffer 
         proc 
         threadTableTitle 
         orgTableSeperator
        (-split-on "thread" args)))
     (t (writeStringToBuffer proc (format "error - unknown response %s arguments %s \n" act (if args args "null"))))))

  (defun reportBreak (preface thread location)
(message "reportbreak preface %s thread %s location %s" preface thread location)
    (writeStringToBuffer
     proc
     (concat
      breakpointHeadline
      preface
      " in thread "
      (threadID thread)
      " at "              
      (locationFile location)
      ":"
      (locationLineNumber location)
      "\n"))
    (setSourceFileWindow
     proc
     (locationFile location)
     (locationLineNumber location)))

  (defun threadID               (args) (nth 0 args))
  (defun threadName          (args) (nth 1 args))
  (defun threadState           (args) (nth 2 args))
  (defun threadFrames       (args) (nth 3 args))
  (defun threadBreakpoint  (args) (nth 4 args))
  (defun threadSuspended (args) (nth 5 args))

  (defun locationFile             (args) (nth 0 args))
  (defun locationLineNumber (args) (nth 1 args))
  (defun locationMethod        (args) (nth 2 args))

  (defun setSourceFileWindow (proc file line)
    (let ((bug (find-file-noselect file)))
      (when (and bug (buffer-live-p (process-buffer proc)))
        (with-current-buffer bug
          (goto-char (point-min))
          (forward-line (1- (string-to-number line)))
          (bm-remove-all-all-buffers)
          (bm-toggle))
        (with-current-buffer (process-buffer proc)
          (goto-char (point-max)))
        (if (= (length (window-list)) 1)
            (split-window))
        (winForOtherBuffer bug (process-buffer proc))
        (let ((procWin (winForOtherBuffer (process-buffer proc) bug)))
          (if procWin
              (select-window procWin))))))

  (defun winForOtherBuffer (buffer notbuffer)
    (let ((win (get-buffer-window buffer)))
      (when (not win)
        (let  ((wl (window-list)))
          (while (and wl (eq notbuffer (window-buffer (car wl))))
            (setq wl (cdr wl)))
          (setq win (if wl (car wl) (car (window-list))))
          (set-window-buffer win buffer)))
      win))
#+END_SRC

#+RESULTS:
: winForOtherBuffer





Process jdbProxy<1> killed




Arguments
| args | type     | array |   |
|      | size     |     2 |   |
|      | contents |     0 | 3 |
|      |          |     1 | 4 |


Locals

Process jdbProxy killed

*** quit
Debugger proxy exited

* Starting debugger session Sat Dec 23 20:47:36 2017.
	Proxy directory: /home/jruby/tmp/jdb/.
	Source root: /home/jruby/tmp/jdb/.
	Main class: test.foo.


Process jdbProxy<2> killed
Debugger proxy started

*** attach localhost 8000

virtual machine created

virtual machine started

*** prepare test.foo

class prepare request for

*** run

virtual machine resuming operation.

Class test.foo loaded.

*** break test.foo main




*** continue
virtual machine resuming operation.

*** breaks

** breakpoint in thread 1 at test/foo.java:10




* Starting debugger session Wed Dec 27 20:36:17 2017.
	Proxy directory: ~/tmp/jdb/.
	Source root: ~/tmp/jdb/.
	Main class: test.foo.

Debugger proxy started

*** attach localhost 8000

virtual machine created

virtual machine started

*** prepare test.foo

class prepare request for

*** run

virtual machine resuming operation.

Class test.foo loaded.

*** break test.foo main


*** continue

virtual machine resuming operation.
** breakpoint in thread 1 at test/foo.java:10

*** frame 1 0


Locals



*** frame 1 0


Arguments
| args | type     | array |   |
|      | size     |     2 |   |
|      | contents |     0 | 3 |
|      |          |     1 | 4 |

*** frame 1 0



Arguments
| args | type     | array |   |
|      | size     |     2 |   |
|      | contents |     0 | 3 |
|      |          |     1 | 4 |

*** thread all



| ID | Name              | State   | Frames | Breakpoint | Suspended |
|----+-------------------+---------+--------+------------+-----------|
|  1 | main              | running |      1 | true       | true      |
| 69 | Reference Handler | waiting |      4 | false      | true      |
| 68 | Finalizer         | waiting |      4 | false      | true      |
| 67 | Signal Dispatcher | running |      0 | false      | true      |

*** thread all



| ID | Name              | State   | Frames | Breakpoint | Suspended |
|----+-------------------+---------+--------+------------+-----------|
|  1 | main              | running |      1 | true       | true      |
| 69 | Reference Handler | waiting |      4 | false      | true      |
| 68 | Finalizer         | waiting |      4 | false      | true      |
| 67 | Signal Dispatcher | running |      0 | false      | true      |

*** next 1

** step in thread 1 at test/foo.java:11


*** frame 1 0


Locals



*** frame 1 0


| Locals |  n | ---- |
| i      | 27 |      |


*** frame 1 0


| Arguments |          |       |   |
|-----------+----------+-------+---|
| args      | type     | array |   |
|           | size     |     2 |   |
|           | contents |     0 | 3 |
|           |          |     1 | 4 |

*** frame 1 0


| Locals |    |
|--------+----|
| i      | 27 |


*** next 1
** step in thread 1 at test/foo.java:12


*** frame 1 0


| Locals |    |
|--------+----|
| i      | 27 |
| j      | 38 |

quit


* Starting debugger session Fri Dec 29 13:23:41 2017.
	Proxy directory: ~/tmp/jdb/.
	Source root: ~/tmp/jdb/.
	Main class: test.foo.


Process jdbProxy killed
Debugger proxy started

*** attach localhost 8000

virtual machine created

virtual machine started

*** prepare test.foo

class prepare request for

*** run

virtual machine resuming operation.

Class test.foo loaded.

*** break test.foo main


*** continue

virtual machine resuming operation.

** breakpoint in thread 1 at test/foo.java:10

*** next 1
** step in thread 1 at test/foo.java:11


*** frame 1 0


| Locals |    |
|--------+----|
| i      | 27 |


*** quit
Debugger proxy exited



* Starting debugger session Fri Dec 29 22:54:42 2017.
	Proxy directory: ~/tmp/jdb/.
	Source root: ~/tmp/jdb/.
	Main class: test.foo.


Process jdbProxy killed
Debugger proxy started

*** attach localhost 8000

virtual machine created

virtual machine started

*** prepare test.foo

class prepare request for

*** run

virtual machine resuming operation.

Class test.foo loaded.

*** break test.foo main


*** continue

virtual machine resuming operation.

** breakpoint in thread 1 at test/foo.java:10


*** frame 1 0


| Locals |
|--------|


*** quit
Debugger proxy exited



* Starting debugger session Sat Dec 30 00:52:14 2017.
	Proxy directory: ~/tmp/jdb/.
	Source root: ~/tmp/jdb/.
	Main class: test.foo.

Debugger proxy started

*** attach localhost 8000

error - unknown response exception arguments ( java.net.ConnectException: Connection refused (Connection refused)) 

