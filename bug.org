* Java Debugger

*** compile the java agent

/home/jruby/tools/jdk1.8.0_131/bin/javac -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger.java

*** start the java agent

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger

*** start the debuggee

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=y foo


#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ht)

  (defun sendDebuggerCommand ()
    (interactive)
    (beginning-of-line)
    (let ((p (point))
          (b))
      (end-of-line)
      (process-send-string
       proc
       (concat  (setq b (buffer-substring-no-properties p (point))) "\n"))) ;
    (insert "\n"))

  (defvar javadebug-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map "\C-j" 'sendDebuggerCommand)
      map))

  (define-derived-mode javadebug-mode
    org-mode "JavaDebug"
    "Major mode java debugger.")

  (javadebug-mode)

  (defun startProc ()
    (let ((default-directory "/home/jruby/tmp/jdb/"))
      (setq 
       proc 
       (start-process 
        "my-process" 
        "*jdbugger*"
        "/home/jruby/tools/jdk1.8.0_131/bin/java" 
        "-cp" 
        "/home/jruby/tmp/jdb/:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" 
        "debugger"))
      (set-process-filter proc 'javadebug-insertion-filter)
      (goto-char (point-max))
      (insert "** Starting debugger session\n")
      (insert "*** attach localhost 8000\n")
      (process-send-string
       proc
       "attach localhost 8000\n"))
    (delete-other-windows)
    (setq sourceWindow (split-window-below))
    (set-window-buffer sourceWindow (process-buffer proc)))


  (defun sendDebuggerCommand (command)
    (interactive "Mdebugger command: ")
    (process-send-string
     proc
     (concat  command "\n"));
    (goto-char (point-max))
    (insert (concat "*** " command "\n")))

  (setq javadebugpoint 0)
  (defun noop (arg) )
  (setq jdbuggerBuffer (current-buffer))

  (defun jdbThread (in)
    (with-current-buffer jdbuggerBuffer
      (insert "|ID|Name|State|Frames|Breakpoint|Suspended|\n")
      (insert "|----|")
      (let ((pos -1))
        (goto-char (point-max))
        (insert (mapconcat
                 (function (lambda (x)
                             (setq pos (1+ pos))
                             (concat (if (= 0 (% pos 6)) "\n" "") "|" x)))
                 in
                 ""))
        (org-ctrl-c-ctrl-c)
        (end-of-line)
        (insert "\n"))))

  (defun location (in)
    (with-current-buffer (find-file (nth 0 in)))
    (goto-line (string-to-number (nth 1 in)))
    (message in))

  (defun error(in)
    (with-current-buffer jdbuggerBuffer
      (insert (concat "*** Error " (car in) "\n"))))

  (setq javadebugKeyWords
        (ht
         ("thread"   'jdbThread)
         ("location" 'location)
         ("error"    'error)))

  (defun javadebug-insertion-filter (proc string)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (process-mark proc))
          (insert string)
          (set-marker (process-mark proc) (point))
          (goto-char javadebugpoint)
          (let ((commands nil))
            (while (looking-at "\\([^\n]*\\)\n")
              (setq javadebugpoint (match-end 0))
              (goto-char javadebugpoint)
              (setq commands (cons (split-string (match-string-no-properties 1) ",") commands)))
            (dolist (args commands)
              (funcall  (ht-get javadebugKeyWords (car args) 'noop) (cdr args))))))))


#+END_SRC



** Starting debugger session
*** attach localhost 8000
| ID                   | Name    | State | Frames | Breakpoint | Suspended |
|----------------------+---------+-------+--------+------------+-----------|
| 65.Signal Dispatcher | running |     0 | false  | true       |           |
|ID|Name|State|Frames|Breakpoint|Suspended|
|----|

| 66.Signal Dispatcher | running | 0 | false | true |

*** run foo
*** continue
