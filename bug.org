* Java Debugger

*** compile the java agent

/home/jruby/tools/jdk1.8.0_131/bin/javac -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger.java

*** start the java agent

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" debugger

*** COMMENT start the debugee 

/home/jruby/tools/jdk1.8.0_131/bin/java -cp ".:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=y foo 3 4

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ht)
  (require 's)
  (require 'bm)

  (defvar javadebug-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "RET") 'javadebug-newline)
      (define-key map (kbd "M-p") 'javadebug-commandring)
      map))

  (defvar proxyProcess nil "the JAVA proxy program which connects to the program to be debugged")
  (defvar defaultThread nil "the last thread in which we had a breakpoint. use this thread if no thread number is specified in a command")

  (defvar commandsToRun  () "list of commands to send to proxy")
  (defvar commandClock    0 "logical clock to id command")
  (defvar commandDone     0 "this command finished") 
  (defvar stepCommands    () "run these commands after a step command finishes")

  (defconst orgTableSeperator     "|----|\n"                                                                 "string to seperate table title from contents")
  (defconst localTableTitle         "Locals\n"                                                              "title tor local variables table")
  (defconst argumentsTableTitle "Arguments\n"                                                        "title for method arguments table")
  (defconst threadTableTitle       "|ID|Name|State|Frames|Breakpoint|Suspended|\n"    "title for thread table")

  (defconst sessionHeadline     "* "     "start of debugging session")
  (defconst breakpointHeadline "** "    "reports a breakpoint")
  (defconst commandHeadline  "*** "   "enter a command")

  (defun expectedString (e) (nth 0 e))
  (defun epectedResponse (e) (nth 1 e))

  (define-derived-mode javadebug-mode
    org-mode "JavaDebug"
    "Major mode java debugger.")

  (defun startProc (px src mn)
    (interactive "Dproxy directory: \nDsource root:: \nMmain class ")
    (goto-char (point-max))
    (insert (concat "\n\n" sessionHeadline "Starting debugger session " (current-time-string) ".\n\tProxy directory: " px ".\n\tSource root: " src ".\n\tMain class: " mn ".\n\n"));
    (cd (file-name-as-directory px))
    (delete-other-windows)
    (javadebug-mode)
    (setq sourceWindow (split-window-below))
    (setq stateStack (list "start" "basic"))
    (setq jdbuggerString "")
    (setq javadebug-ring (make-ring 8))
    (setq javadebug-ring-index 0)
    (setq commandsToRun ())
    (setq commandClock 0)
    (setq commandDone 0)
    (setq stepCommands ())
    (setq expected
          (list
           (list "proxy,started" "attach localhost 8000")
           (list "virtual machine started" (concat "prepare " mn))
           (list "prepare class" "run")
           (list "classloaded" (concat "break " mn " main"))
           (list "breakpoint created at"  "continue")))
    (setq proxyProcess
          (start-process 
           "jdbProxy" 
           (current-buffer)
           "/home/jruby/tools/jdk1.8.0_131/bin/java" 
           "-cp" 
           "/home/jruby/tmp/jdb/:/home/jruby/tools/jdk1.8.0_131/lib/tools.jar" 
           "debugger"))
    (set-process-filter proxyProcess 'javadebug-insertion-filter)
    (goto-char (point-max))
    (set-marker (process-mark proxyProcess) (point)))

  (defun javadebug-newline ()
    (interactive)
    (let ((com (buffer-substring-no-properties
                (line-beginning-position)
                (line-end-position))))
      (if (or 
           (/=  (line-end-position) (point-max))
           (not (string-match-p "[a-zA-Z0-9 ]+" com)))
          (org-return)
        (beginning-of-line)
        (ignore-errors (kill-line))  ;; kill-line signals an error at the end of buffer
        (javadebug-send-command com))))

  (defun javadebug-commandring ()
    (interactive)
    (if (/=  (line-end-position) (point-max))
        (progn
          (goto-char (point-max))
          (insert "\n")
          (setq javadebug-ring-index 0))
      (beginning-of-line)
      (ignore-errors (kill-line))  ;; kill-line signals an error at the end of buffer
      (if (not (ring-empty-p javadebug-ring))
          (progn
            (if (>= javadebug-ring-index (ring-length javadebug-ring))
                (setq javadebug-ring-index 0))
            (insert (ring-ref javadebug-ring javadebug-ring-index))
            (setq javadebug-ring-index (1+ javadebug-ring-index))))))

  (defun javadebug-send-command (in)
    (let ((com (split-string in ";"))
          (cl     ())
          (c     ()))
      (while (setq c (car com))
        (setq c (s-trim c))
        (setq com (cdr com))
        (cond ((or
                (s-starts-with? "next" c t)
                (s-starts-with? "back" c t)
                (s-starts-with? "into" c t))
              (setq stepCommands (append stepCommands com))
              (setq com ()))
              (t (setq cl (append cl (list c))))))
      (setq commandsToRun (append commandsToRun cl)))
      (javadebug-send-next-command))

  (defun javadebug-send-next-command ()
    (if (and commandsToRun
             (= commandClock commandDone))
        (let ((c (car commandsToRun)))
          (setq commandsToRun (cdr commandsToRun))
          (ring-insert javadebug-ring c)
          (writeStringToBuffer proxyProcess (concat "\n" commandHeadline c "\n"))
          (setq commandClock (1+ commandClock))
          (process-send-string proxyProcess (concat (number-to-string commandClock) ","  c "\n")))))

  (defun writeStringToBuffer (proc string)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (point-max))
          (insert string)))))

  (defun writeOrgTableToBuffer (proc title sep rows)
    (when (buffer-live-p (process-buffer proc))
      (with-current-buffer (process-buffer proc)
        (save-excursion
          ;; Insert the text, advancing the process marker.
          (goto-char (point-max))
          (insert (concat "\n\n" title))
          (insert sep)
          (insert (dataLayout rows))
          (set-marker (process-mark proc) (point))
          (beginning-of-line 0)
          (org-ctrl-c-ctrl-c)))))

  (defun dataLayout (args)
    (if args
        (let ((s "| ")
              (stack nil)
              (rc 0)
              (ac 0))
          (push (list rc args) stack)
          (while stack
            (cond
             ((not args)
              (let ((a (pop stack)))
                (setq args (nth 1 a))
                (setq rc     (nth 0 a))))
             ((listp (car args))
              (push (list rc (cdr args)) stack)
              (setq args (car args)))
             ((not (listp (car args)))
              (let ((v (car args)))
                (setq args (cdr args))
                (while (/= rc ac)
                  (cond
                   ((< ac rc)
                    (setq s (concat s " | "))
                    (setq ac (1+ ac)))
                   ((> ac rc)
                    (setq s (concat s "\n| "))
                    (setq ac 0))))
                (setq s (concat s v))
                (setq rc (1+ rc))))))
          s)
      ""))

  (defun javadebug-insertion-filter (proc string)
    (writeStringToBuffer proc (concat "Received: "  string " :EndReceived\n"))
    (setq jdbuggerString (concat jdbuggerString string))
    (if (s-ends-with? "\n" jdbuggerString)
        (let ((com (split-string jdbuggerString "\n" 't)))
          (writeStringToBuffer proc (format "jdbuggerString: %s com %s\n" jdbuggerString com))
          (setq jdbuggerString ())
          (dolist (c com)
            (writeStringToBuffer proc (format "c: %s com %s\n" c com))
            (if (not (s-blank? c)) (jdbAction proc c)))
          (when (and (buffer-live-p (process-buffer proc))
                     (get-buffer-window (process-buffer proc)))
            (select-window (get-buffer-window (process-buffer proc)))
            (goto-char (point-max))
            (insert "\n")))))

  (defun jdbAction (proc in)
    (writeStringToBuffer proc (concat "Processed: "  in " :EndProcessed\n"))
    (let ((state (car stateStack))
          (args (split-string in ",")))
      (cond ((string= (car args) "error")
             (writeStringToBuffer proc (concat " "  in "\n")))
            ((string= (car args) "completed")
             (writeStringToBuffer proc (format "Completed: commandsToRun %s commandDone %s commandClock %s\n" commandsToRun commandDone commandClock))
             (setq commandDone (string-to-number (nth 1 args)))
             (javadebug-send-next-command))
            ((string= state "basic")
             (basicState proc (car args) (cdr args)))
            ((string= state "start")
             (startState proc in)))))

  (defun basicState (proc act args)
    (let ((retstring ()))
      (cond ((string= act "breakpoint")
             (reportBreak args))
            ((string= act "step")
             (reportBreak args)
             (setq commandsToRun (append stepCommands commandsToRun))
             (javadebug-send-next-command))
            ((string= act "proxy")
             (if (string= "exit" (car args))
                 (delete-process proc))
             (if (string= "started" (car args))
                 (writeStringToBuffer proc "Debugger proxy started\n")))
            ((string= act "break") )
            ((string= act "resuming") )
            ((string= act "frame") )
            ((or (string= act "local") (string= act "argument"))
             (writeOrgTableToBuffer
              proc
              (if (string= act "local") localTableTitle argumentsTableTitle)
              ""
              (if (and args (car args)) (nth 0 (read-from-string (car args))) nil)))
            ((string= act "thread")
             (let ((b nil))
               (while (and args (threadDescriptor args))
                 (setq b (cons (list (threadID args)  (threadName args) (threadState args)  (threadFrames args)  (threadBreakpoint args) (threadSuspended args)) b))
                 (setq args (skipThread args)))
               (writeOrgTableToBuffer proc threadTableTitle orgTableSeperator b)))
            (t (writeStringToBuffer proc (format "unknown response %s arguments %s \n" act (if args args "null")))))))

  (defun reportBreak (args)
    (setq defaultThread (threadID (breakpointThread args)))
    (writeStringToBuffer
     proc
     (concat
      breakpointHeadline
      act
      " in thread "
      (threadID (breakpointThread args))
      " at "              
      (locationFile (breakpointLocation args))
      ":"
      (locationLineNumber (breakpointLocation args))
      "\n"))
    (setSourceFileWindow
     proc
     (locationFile (breakpointLocation args))
     (locationLineNumber (breakpointLocation args))))

  (defun threadID (args) (nth 1 args))
  (defun threadName (args) (nth 2 args))
  (defun threadState (args) (nth 3 args))
  (defun threadFrames (args) (nth 4 args))
  (defun threadBreakpoint (args) (nth 5 args))
  (defun threadSuspended (args) (nth 6 args))

  (defun skipThread (args) (nthcdr 7 args))
  (defun threadDescriptor (args)
    (if (string= "thread" (car args))
        (-slice args 0 7)
      ()))

  (defun breakpointThread (args) (-slice args 0 7))
  (defun breakpointLocation (args) (-slice args  7 12))

  (defun locationFile (args) (nth 1 args))
  (defun locationLineNumber (args) (nth 2 args))
  (defun locationMethod (args) (nth 3 args))

  (defun nameValuePairName (args) (nth 0 args))
  (defun nameValuePairValue (args) (nth 1 args))
  (defun skipNameValuePair   (args) (nthcdr 2 args))

  (defun startState (proc in)
    (if (string-prefix-p (expectedString (car expected)) in)
        (javadebug-send-command (expectedResponse (pop expected))))
    (if (null expected)
        (pop stateStack)))

  (defun setSourceFileWindow (proc file line)
    (let ((bug (find-file-noselect file)))
      (when (and bug (buffer-live-p (process-buffer proc)))
        (with-current-buffer bug
          (goto-char (point-min))
          (forward-line (1- (string-to-number line)))
          (bm-remove-all-all-buffers)
          (bm-toggle))
        (with-current-buffer (process-buffer proc)
          (goto-char (point-max)))
        (if (= (length (window-list)) 1)
            (split-window))
        (winForOtherBuffer bug (process-buffer proc))
        (let ((procWin (winForOtherBuffer (process-buffer proc) bug)))
          (if procWin
              (select-window procWin))))))

  (defun winForOtherBuffer (buffer notbuffer)
    (let ((win (get-buffer-window buffer)))
      (when (not win)
        (let  ((wl (window-list)))
          (while (and wl (eq notbuffer (window-buffer (car wl))))
            (setq wl (cdr wl)))
          (setq win (if wl (car wl) (car (window-list))))
          (set-window-buffer win buffer)))
      win))

#+END_SRC



* Starting debugger session Sat Dec 16 20:08:40 2017.
	Proxy directory: /home/jruby/tmp/jdb/.
	Source root: /home/jruby/tmp/jdb/.
	Main class: test.foo.

Received: proxy,started
 :EndReceived
jdbuggerString: proxy,started
 com (proxy,started)
c: proxy,started com (proxy,started)
Processed: proxy,started :EndProcessed

*** attach localhost 8000

Received: attached,created virtual machine :EndReceived
Received: 
completed
 :EndReceived
jdbuggerString: attached,created virtual machine
completed
 com (attached,created virtual machine completed)
c: attached,created virtual machine com (attached,created virtual machine completed)
Processed: attached,created virtual machine :EndProcessed
c: completed com (attached,created virtual machine completed)
Processed: completed :EndProcessed
Completed: commandsToRun nil proxyAvailable nil

Received: virtual machine started
 :EndReceived
jdbuggerString: virtual machine started
 com (virtual machine started)
c: virtual machine started com (virtual machine started)
Processed: virtual machine started :EndProcessed

*** prepare test.foo

Received: prepare class test.foo
completed
 :EndReceived
jdbuggerString: prepare class test.foo
completed
 com (prepare class test.foo completed)
c: prepare class test.foo com (prepare class test.foo completed)
Processed: prepare class test.foo :EndProcessed
c: completed com (prepare class test.foo completed)
Processed: completed :EndProcessed
Completed: commandsToRun (run) proxyAvailable nil

*** run

Received: resuming target program
 :EndReceived
jdbuggerString: resuming target program
 com (resuming target program)
c: resuming target program com (resuming target program)
Processed: resuming target program :EndProcessed

Received: completed
 :EndReceived
jdbuggerString: completed
 com (completed)
c: completed com (completed)
Processed: completed :EndProcessed
Completed: commandsToRun nil proxyAvailable nil

Received: classloaded,test.foo :EndReceived
Received: 
 :EndReceived
jdbuggerString: classloaded,test.foo
 com (classloaded,test.foo)
c: classloaded,test.foo com (classloaded,test.foo)
Processed: classloaded,test.foo :EndProcessed

*** break test.foo main

Received: breakpoint created at test.foo:10
 :EndReceived
jdbuggerString: breakpoint created at test.foo:10
 com (breakpoint created at test.foo:10)
c: breakpoint created at test.foo:10 com (breakpoint created at test.foo:10)
Processed: breakpoint created at test.foo:10 :EndProcessed

Received: completed
 :EndReceived
jdbuggerString: completed
 com (completed)
c: completed com (completed)
Processed: completed :EndProcessed
Completed: commandsToRun (continue) proxyAvailable nil

*** continue

Received: resuming target program
completed
 :EndReceived
jdbuggerString: resuming target program
completed
 com (resuming target program completed)
c: resuming target program com (resuming target program completed)
Processed: resuming target program :EndProcessed
unknown response resuming target program arguments null 
c: completed com (resuming target program completed)
Processed: completed :EndProcessed
Completed: commandsToRun nil proxyAvailable nil

Received: breakpoint,thread,1,main,running,1,true,true,location,test/foo.java,10,main
 :EndReceived
jdbuggerString: breakpoint,thread,1,main,running,1,true,true,location,test/foo.java,10,main
 com (breakpoint,thread,1,main,running,1,true,true,location,test/foo.java,10,main)
c: breakpoint,thread,1,main,running,1,true,true,location,test/foo.java,10,main com (breakpoint,thread,1,main,running,1,true,true,location,test/foo.java,10,main)
Processed: breakpoint,thread,1,main,running,1,true,true,location,test/foo.java,10,main :EndProcessed
** breakpoint in thread 1 at test/foo.java:10

